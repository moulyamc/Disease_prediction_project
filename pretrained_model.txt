import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB


data_frame = pd.read_csv('/content/drive/MyDrive/new_csv/cleaned_file.csv')


X_train, X_test, y_train, y_test = train_test_split(data_frame.drop('prognosis', axis=1), data_frame['prognosis'], test_size=0.2, random_state=42)

clf = GaussianNB()
clf.fit(X_train, y_train)


accuracy = clf.score(X_test, y_test)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

y_pred = clf.predict(X_test)
report = classification_report(y_test, y_pred)
print("Classification Report:\n", report)
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

num_classes = y_train.nunique()
print("Number of Classes:", num_classes)

from sklearn.naive_bayes import GaussianNB

clf = GaussianNB()


clf.fit(X_train, y_train)

print("Class Priors:", clf.class_prior_)


print("Class Means:", clf.theta_)

new_symptoms_data = X_test.iloc[0]


new_symptoms_data = new_symptoms_data.values.reshape(1, -1)


predicted_disease = clf.predict(new_symptoms_data)

actual_disease = y_test.iloc[1]


print("Actual Disease:", actual_disease)
print("Predicted Disease:", predicted_disease)


if predicted_disease == actual_disease:
    print("Prediction is correct!")
else:
    print("Prediction is incorrect.")

from sklearn.model_selection import GridSearchCV


param_grid = {
    'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5]
}


clf = GaussianNB()


grid_search = GridSearchCV(clf, param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print("Best Hyperparameters:", best_params)


best_clf = grid_search.best_estimator_


accuracy = best_clf.score(X_test, y_test)
print(f"Accuracy with Best Model: {accuracy}")

import joblib

joblib.dump(best_clf, 'gaussian_nb_model.pkl')


loaded_model = joblib.load('gaussian_nb_model.pkl')


new_symptoms_data = X_test.iloc[26]


new_symptoms_data = new_symptoms_data.values.reshape(1, -1)


predicted_disease = loaded_model.predict(new_symptoms_data)

print("Predicted Disease:", predicted_disease)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
import pickle


data = pd.read_csv('/content/drive/MyDrive/new_csv/cleaned_file.csv')

X_train, X_test, y_train, y_test = train_test_split(data.drop(['prognosis', 'Unnamed: 133'], axis=1), data['prognosis'], test_size=0.2, random_state=42)


clf = GaussianNB()
clf.fit(X_train, y_train)


with open('/content/gaussian_nb_model.pkl', 'wb') as file:
    pickle.dump(clf, file)




with open('/content/gaussian_nb_model.pkl', 'rb') as file:
    loaded_model = pickle.load(file)